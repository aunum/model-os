from typing import List, Optional, Union
import json
import os
import logging

import git

from modelos.scm import SCM

MDL_DOCKERFILE_NAME = "Dockerfile.mdl"


class Dockerfile:
    """A Python interface for Dockerfiles"""

    _statements: List[str] = ["# this file was generated by modelos"]
    _revision: str

    def __init__(self) -> None:
        self._revision = SCM().sha()

    def from_(self, image: str) -> None:
        statement = f"FROM {image}"
        self._statements.append(statement)

    def run(self, cmd: str) -> None:
        statement = f"RUN {cmd}"
        self._statements.append(statement)

    def shell(self, cmd: List[str]):
        statement = f"SHELL {json.dumps(cmd)}"
        self._statements.append(statement)

    def cmd(self, cmd: List[str]) -> None:
        statement = f"CMD {json.dumps(cmd)}"
        self._statements.append(statement)

    def label(self, key: str, value: str) -> None:
        statement = f'LABEL "{key}"="{value}"'
        self._statements.append(statement)

    def expose(self, port: int, protocol: Optional[str] = None) -> None:
        statement = f"EXPOSE {port}"
        if protocol is not None:
            statement = f"EXPOSE {port}/{protocol}"
        self._statements.append(statement)

    def env(self, key: str, value: str) -> None:
        statement = f'ENV {key}="{value}"'
        self._statements.append(statement)

    def copy(self, src: Union[str, List[str]], dest: str) -> None:
        statment = None
        if isinstance(src, str):
            statment = f"COPY {src} {dest}"
        else:
            src.append(dest)
            statment = f"COPY {json.dumps(src)}"

        self._statements.append(statment)

    def add(self, src: Union[str, List[str]], dest: str) -> None:
        statment = None
        if isinstance(src, str):
            statment = f"ADD {src} {dest}"
        else:
            src.append(dest)
            statment = f"ADD {json.dumps(src)}"
        self._statements.append(statment)

    def entrypoint(self, cmd: List[str]) -> None:
        statement = f"ENTRYPOINT {json.dumps(cmd)}"
        self._statements.append(statement)

    def volume(self, path: str) -> None:
        statement = f"VOLUME {path}"
        self._statements.append(statement)

    def user(self, user: str, group: Optional[str] = None) -> None:
        statement = f"USER {user}"
        if group is not None:
            statement = f"USER {user}:{group}"
        self._statements.append(statement)

    def workdir(self, path: str) -> None:
        statement = f"WORKDIR {path}"
        self._statements.append(statement)

    def arg(self, name: str, default: Optional[str] = None) -> None:
        statement = f"ARG {name}"
        if default is not None:
            statement = f"ARG {name}={default}"
        self._statements.append(statement)

    def __str__(self) -> str:
        return "\n".join(self._statements)


def dockerfile_path() -> str:
    # should we change this to project root? https://github.com/aunum/arc/issues/18
    repo = git.Repo(".", search_parent_directories=True)
    root_repo_path = repo.working_tree_dir

    return os.path.join(str(root_repo_path), MDL_DOCKERFILE_NAME)


def write_dockerfile(c: Dockerfile) -> str:
    delete_dockerfile()
    path = dockerfile_path()
    logging.info(f"writing dockerfile to path: {path}")
    with open(path, "w") as f:
        f.write(str(c))
    return path


def delete_dockerfile() -> None:
    path = dockerfile_path()
    logging.info(f"deleting generated dockerfile: {path}")
    try:
        os.remove(path)
    except OSError:
        pass
